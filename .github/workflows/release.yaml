permissions:
  contents: write

name: Release

on:
  workflow_dispatch:
    inputs:
      project:
        type: choice
        description: "Select project to release"
        required: true
        default: forgo
        options:
          - forgo
          - forgo-lib-cli
      version:
        description: "Version (e.g., 1.0.0)"
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Update ${{ github.event.inputs.project }}'s Cargo.toml package version
        run: cargo=$(toml set crates/${{ github.event.inputs.project }}/Cargo.toml package.version "${{ github.event.inputs.version }}") && echo "$cargo" > crates/${{ github.event.inputs.project }}/Cargo.toml

      - name: Validate ${{ github.event.inputs.project }}'s Cargo.toml package version aligns with input version
        run: test "$(toml get -r crates/${{ github.event.inputs.project }}/Cargo.toml package.version)" = "${{ github.event.inputs.version }}"

      - name: Validate ${{ github.event.inputs.project }} version is semantic
        run: sem-tool validate "${{ github.event.inputs.version }}"

      - name: Build ${{ github.event.inputs.project }} in release mode
        run: cargo build --release -p ${{ github.event.inputs.project }}

      - name: Generate ${{ github.event.inputs.project }} documentation
        run: cargo doc --release --no-deps -p ${{ github.event.inputs.project }}

      - name: Login into crates.io
        run: echo "${CARGO_REGISTRY_TOKEN}" | cargo login

      - name: "Package ${{ github.event.inputs.project }} for crates.io"
        run: cargo package --allow-dirty

      - name: "Publish ${{ github.event.inputs.project }} to crates.io"
        run: cargo publish -p ${{ github.event.inputs.project }} --allow-dirty

      - name: Create ${{ github.event.inputs.project }} GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.event.inputs.project }}@${{ github.event.inputs.version }}"
          gh release create "${TAG}" --title "${TAG}" --generate-notes
        shell: bash
